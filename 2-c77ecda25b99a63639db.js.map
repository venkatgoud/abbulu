{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/fold/foldcode.js"],"names":["CodeMirror","doFold","cm","pos","options","force","call","finder","getOption","Pos","minSize","getRange","allowFolded","range","to","line","from","marks","findMarksAt","i","length","__isFold","cleared","clear","firstLine","myWidget","widget","text","document","createTextNode","createElement","appendChild","className","cloneNode","makeWidget","on","e","myRange","e_preventDefault","markText","replacedWith","clearOnEnter","signal","newFoldFunction","rangeFinder","defineExtension","this","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","operation","lastLine","unfoldAll","registerHelper","funcs","Array","prototype","slice","arguments","start","found","helpers","getHelpers","cur","defaultOptions","auto","minFoldSize","scanUp","name","undefined","editorOptions","foldOptions","defineOption","mod","__webpack_require__"],"mappings":"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","file":"2-c77ecda25b99a63639db.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n"],"sourceRoot":""}