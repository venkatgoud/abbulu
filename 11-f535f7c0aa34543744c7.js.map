{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/fold/markdown-fold.js"],"names":["CodeMirror","registerHelper","cm","start","maxDepth","isHeader","lineNo","tokentype","getTokenTypeAt","Pos","test","headerLevel","line","nextLine","match","length","firstLine","getLine","level","lastLineNo","lastLine","end","nextNextLine","from","to","mod","__webpack_require__"],"mappings":"+EAUC,SAAAA,GACD,aAEAA,EAAAC,eAAA,2BAAAC,EAAAC,GACA,IAAAC,EAAA,IAEA,SAAAC,EAAAC,GACA,IAAAC,EAAAL,EAAAM,eAAAR,EAAAS,IAAAH,EAAA,IACA,OAAAC,GAAA,aAAAG,KAAAH,GAGA,SAAAI,EAAAL,EAAAM,EAAAC,GACA,IAAAC,EAAAF,KAAAE,MAAA,OACA,OAAAA,GAAAT,EAAAC,GAAAQ,EAAA,GAAAC,QACAD,EAAAD,KAAAC,MAAA,iBACAT,EAAAC,EAAA,QAAAO,EAAA,OACAT,EAGA,IAAAY,EAAAd,EAAAe,QAAAd,EAAAS,MAAAC,EAAAX,EAAAe,QAAAd,EAAAS,KAAA,GACAM,EAAAP,EAAAR,EAAAS,KAAAI,EAAAH,GACA,GAAAK,IAAAd,EAAA,CAIA,IAFA,IAAAe,EAAAjB,EAAAkB,WACAC,EAAAlB,EAAAS,KAAAU,EAAApB,EAAAe,QAAAI,EAAA,GACAA,EAAAF,KACAR,EAAAU,EAAA,EAAAR,EAAAS,IAAAJ,MACAG,EACAR,EAAAS,EACAA,EAAApB,EAAAe,QAAAI,EAAA,GAGA,OACAE,KAAAvB,EAAAS,IAAAN,EAAAS,KAAAI,EAAAD,QACAS,GAAAxB,EAAAS,IAAAY,EAAAnB,EAAAe,QAAAI,GAAAN,YAvCAU,CAAQC,EAAQ","file":"11-f535f7c0aa34543744c7.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n"],"sourceRoot":""}