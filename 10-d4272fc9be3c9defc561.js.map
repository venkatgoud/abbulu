{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/dialog/dialog.js"],"names":["CodeMirror","dialogDiv","cm","template","bottom","dialog","wrap","getWrapperElement","appendChild","document","createElement","className","innerHTML","addClass","closeNotification","newVal","state","currentNotificationClose","defineExtension","callback","options","this","closed","me","close","inp","value","rmClass","parentNode","removeChild","focus","onClose","button","getElementsByTagName","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","callbacks","buttons","blurring","i","length","b","e_preventDefault","setTimeout","doneTimer","duration","clearTimeout","mod","__webpack_require__"],"mappings":"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","file":"10-d4272fc9be3c9defc561.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    CodeMirror.addClass(wrap, 'dialog-opened');\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n"],"sourceRoot":""}