{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/dialog/dialog.js","webpack:///./node_modules/codemirror/addon/search/searchcursor.js","webpack:///./node_modules/codemirror/addon/search/search.js"],"names":["CodeMirror","dialogDiv","cm","template","bottom","dialog","wrap","getWrapperElement","appendChild","document","createElement","className","innerHTML","addClass","closeNotification","newVal","state","currentNotificationClose","defineExtension","callback","options","this","closed","me","close","inp","value","rmClass","parentNode","removeChild","focus","onClose","button","getElementsByTagName","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","callbacks","buttons","blurring","i","length","b","e_preventDefault","setTimeout","doneTimer","duration","clearTimeout","mod","__webpack_require__","doFold","noFold","Pos","ensureFlags","regexp","flags","current","ignoreCase","global","multiline","regexpFlags","target","indexOf","charAt","RegExp","source","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","lastMatchIn","cutOff","newMatch","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","slice","SearchCursor","query","caseFold","atOccurrence","clipPos","matches","reverse","fold","lines","split","search","first","firstLine","found","lastIndexOf","top","topString","cutFrom","end","endString","chunk","curLine","before","inside","startLine","startCh","test","maybeMultiline","String","prototype","normalize","str","toLowerCase","findNext","find","findPrevious","result","cmpPos","replace","newText","origin","splitLines","replaceRange","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","head","setSelections","SearchState","posFrom","posTo","lastQuery","overlay","getSearchState","queryCaseInsensitive","text","shortText","deflt","f","openDialog","prompt","parseString","_","parseQuery","isRE","startSearch","queryText","removeOverlay","caseInsensitive","token","stream","skipToEnd","searchOverlay","addOverlay","showMatchesOnScrollbar","annotate","clear","doSearch","rev","persistent","immediate","q","getSelection","hiding","searchNext","event","style","opacity","shiftKey","querySelector","display","wrapper","getBoundingClientRect","cursorCoords","onEnter","clearSearch","persistentDialog","getQueryDialog","keyName","extra","getOption","cmd","keyMap","execCommand","operation","cursor","setSelection","scrollIntoView","phrase","replaceAll","getRange","all","dialogText","getReplaceQueryDialog","getReplacementQueryDialog","advance","fs","openConfirm","confirm","confirmDialog","getDoReplaceConfirm","doReplace","commands","findPersistent","findPersistentNext","findPersistentPrev","findPrev"],"mappings":"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","file":"8-77123c5c7f566494d0f3.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    CodeMirror.addClass(wrap, 'dialog-opened');\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (q instanceof RegExp && q.source == \"x^\") q = null\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, getQueryDialog(cm), q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, getQueryDialog(cm), \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n\n  function getQueryDialog(cm)  {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Search:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplaceQueryDialog(cm) {\n    return ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplacementQueryDialog(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"With:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  }\n  function getDoReplaceConfirm(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Replace?\") + '</span> <button>' + cm.phrase(\"Yes\") + '</button> <button>' + cm.phrase(\"No\") + '</button> <button>' + cm.phrase(\"All\") + '</button> <button>' + cm.phrase(\"Stop\") + '</button> ';\n  }\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? cm.phrase(\"Replace all:\") : cm.phrase(\"Replace:\")) + '</span>';\n    dialog(cm, dialogText + getReplaceQueryDialog(cm), dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, getReplacementQueryDialog(cm), cm.phrase(\"Replace with:\"), \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, getDoReplaceConfirm(cm), cm.phrase(\"Replace?\"),\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n"],"sourceRoot":""}