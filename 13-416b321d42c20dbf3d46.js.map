{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/hint/show-hint.js"],"names":["CodeMirror","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","Completion","cm","options","this","widget","debounce","tick","startPos","getCursor","startLen","getLine","line","length","getSelection","self","on","activityFunc","cursorActivity","showHint","getHints","async","newOpts","hint","prop","defineExtension","pos","editor","hintOptions","out","defaultOptions","undefined","resolve","parseOptions","selections","listSelections","somethingSelected","supportsSelection","i","head","anchor","state","completionActive","close","completion","signal","update","requestAnimationFrame","window","fn","setTimeout","cancelAnimationFrame","clearTimeout","getText","text","getHintElement","hintsElement","el","nodeName","toUpperCase","parentNode","Widget","data","picked","ownerDocument","getInputField","parentWindow","defaultView","hints","createElement","theme","className","selectedHint","completions","list","elt","appendChild","cur","render","createTextNode","displayText","hintId","cursorCoords","alignWithWord","from","left","top","bottom","below","style","winW","innerWidth","Math","max","body","offsetWidth","documentElement","winH","innerHeight","offsetHeight","container","box","getBoundingClientRect","overlapY","scrolls","scrollHeight","clientHeight","startScroll","getScrollInfo","height","curTop","cursor","ch","closingOnBlur","overlapX","right","width","node","firstChild","nextSibling","paddingRight","display","nativeBarWidth","addKeyMap","keyMap","handle","baseMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","test","navigator","platform","custom","customKeys","ourMap","addBinding","key","val","bound","hasOwnProperty","extra","extraKeys","buildKeyMap","n","avoidWrap","changeActive","screenAmount","closeOnUnfocus","onBlur","onFocus","onScroll","curScroll","getWrapperElement","newTop","point","pageYOffset","scrollTop","e","t","target","srcElement","completeOnSingleClick","focus","childNodes","fetchHints","callback","result","then","prototype","active","off","replaceRange","to","closeCharacters","charAt","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","replace","offsetTop","floor","registerHelper","words","helpers","getHelpers","resolved","app","push","applicableHelpers","run","getHelper","fromList","anyword","term","token","getTokenAt","Pos","start","string","substr","found","word","slice","commands","autocomplete","auto","defineOption","mod","__webpack_require__"],"mappings":"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","file":"13-416b321d42c20dbf3d46.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  CodeMirror.defineExtension(\"closeHint\", function() {\n    if (this.state.completionActive) this.state.completionActive.close()\n  })\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (!pos.ch || this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n\n    var mac = /Mac/.test(navigator.platform);\n\n    if (mac) {\n      baseMap[\"Ctrl-P\"] = function() {handle.moveFocus(-1);};\n      baseMap[\"Ctrl-N\"] = function() {handle.moveFocus(1);};\n    }\n\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n    var ownerDocument = cm.getInputField().ownerDocument;\n    var parentWindow = ownerDocument.defaultView || ownerDocument.parentWindow;\n\n    var hints = this.hints = ownerDocument.createElement(\"ul\");\n    var theme = completion.cm.options.theme;\n    hints.className = \"CodeMirror-hints \" + theme;\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(ownerDocument.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(ownerDocument.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = parentWindow.innerWidth || Math.max(ownerDocument.body.offsetWidth, ownerDocument.documentElement.offsetWidth);\n    var winH = parentWindow.innerHeight || Math.max(ownerDocument.body.offsetHeight, ownerDocument.documentElement.offsetHeight);\n    (completion.options.container || ownerDocument.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (parentWindow.pageYOffset || (ownerDocument.documentElement || ownerDocument.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[this.selectedHint], hints.childNodes[this.selectedHint]);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      if (node) node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur)\n    var term, from = CodeMirror.Pos(cur.line, token.start), to = cur\n    if (token.start < cur.ch && /\\w/.test(token.string.charAt(cur.ch - token.start - 1))) {\n      term = token.string.substr(0, cur.ch - token.start)\n    } else {\n      term = \"\"\n      from = cur\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n"],"sourceRoot":""}